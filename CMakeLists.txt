cmake_minimum_required(VERSION 3.2)
cmake_policy(SET CMP0003 NEW)
if(POLICY CMP0056) # Honor link flags in try_compile() source-file signature.
  cmake_policy(SET CMP0056 NEW) # since 3.2
endif()
if(POLICY CMP0065)
  cmake_policy(SET CMP0065 NEW) # since 3.4. ENABLE_EXPORTS.
endif()
if(POLICY CMP0066) # honor per-config flags in try_compile() source-file
                   # signature.
  cmake_policy(SET CMP0066 NEW) # since 3.7
endif()
if(POLICY CMP0067) # honor C++ standard requirement in try_compile() source-file
                   # signature.
  cmake_policy(SET CMP0067 NEW) # since 3.8
endif()
if(POLICY CMP0069) # Honor IPO setting for all supported compilers, not just icc
  cmake_policy(SET CMP0069 NEW) # since 3.9
endif()

set(CMAKE_CXX_STANDARD 11)
set(CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# "C" needs to be enabled for some builtin CMake tests :-/
project(SMHasher3 C CXX)

include(CheckCCompilerFlag)
# Check if the same compile family is used for both C and CXX
if(NOT (CMAKE_C_COMPILER_ID STREQUAL CMAKE_CXX_COMPILER_ID))
  message(WARNING "CMAKE_C_COMPILER_ID (${CMAKE_C_COMPILER_ID}) is different "
    "from CMAKE_CXX_COMPILER_ID (${CMAKE_CXX_COMPILER_ID}). "
    "The final binary may be unusable.")
endif()

########################################
# Compiler flags (optimization, debug, etc.)
########################################

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE
      "Release"
      CACHE STRING "Choose the type of build, options are: Release Debug Asan" FORCE)
endif(NOT CMAKE_BUILD_TYPE)

set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -g")
set(CMAKE_CXX_FLAGS_DEBUG   "-O1 -DDEBUG  -g")
set(CMAKE_CXX_FLAGS_ASAN    "${CMAKE_CXX_FLAGS_DEBUG}")

if(MSVC)
  # using Visual Studio C++, already the default with VS17
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE2")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL GNU
     OR (CMAKE_CXX_COMPILER_ID STREQUAL AppleClang)
     OR (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
     OR (CMAKE_CXX_COMPILER_ID STREQUAL Intel))

  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}  -ggdb3")
  set(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}    -ggdb3")
  set(CMAKE_CXX_FLAGS_ASAN    "${CMAKE_CXX_FLAGS_ASAN} -Og -ggdb3  \
      -fsanitize=address,undefined -fno-optimize-sibling-calls \
      -fsanitize-address-use-after-scope -fno-omit-frame-pointer")

  if(NOT CMAKE_CROSSCOMPILING)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
  endif()
endif()

function(whole_archive_link_flags lib var)
  if(MSVC)
    set(${var} -WHOLEARCHIVE:$<TARGET_FILE:${lib}> PARENT_SCOPE)
  elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(${var} -Wl,-force_load,$<TARGET_FILE:${lib}> PARENT_SCOPE)
  else()
    set(${var} -Wl,--whole-archive ${lib} -Wl,--no-whole-archive PARENT_SCOPE)
  endif()
endfunction()

########################################
# Platform detection things
########################################

set(DETECT_DIR ${CMAKE_SOURCE_DIR}/platform)
set(CMAKE_REQUIRED_QUIET true)
set(AUTOGEN_WARNING
"/*\n\
 * DO NOT EDIT THIS FILE\n\
 *\n\
 * It is generated by CMake during build configuration.\n\
 * See ${DETECT_DIR}/functions.cmake\n\
 * for documentation on how and why this is generated.\n\
 */"
)

include(${DETECT_DIR}/functions.cmake)
include(${DETECT_DIR}/family.cmake)
include(${DETECT_DIR}/intsize.cmake)
include(${DETECT_DIR}/endian.cmake)
include(${DETECT_DIR}/builtins.cmake)
include(${DETECT_DIR}/isa.cmake)
include(${DETECT_DIR}/threads.cmake)
include(${DETECT_DIR}/timing.cmake)

configure_file(${DETECT_DIR}/Timing.h.in ${CMAKE_BINARY_DIR}/include/Timing.h)
configure_file(${DETECT_DIR}/Platform.h.in ${CMAKE_BINARY_DIR}/include/Platform.h)
include_directories(${CMAKE_BINARY_DIR}/include)

########################################
# Specific source file requirements :-/
########################################

if(NOT MSVC)
  set_source_files_properties(hashes/halftimehash.cpp PROPERTIES
    COMPILE_FLAGS "-flax-vector-conversions -Wno-ignored-attributes")
  if (CMAKE_CXX_COMPILER_ID STREQUAL Intel)
    set_source_files_properties(hashes/floppsyhash.cpp PROPERTIES
      COMPILE_FLAGS "-fp-model strict")
  else()
    set_source_files_properties(hashes/floppsyhash.cpp PROPERTIES
      COMPILE_FLAGS "-ffp-contract=off")
  endif()
endif(NOT MSVC)

########################################
# The list of hash source files
########################################

include(hashes/Hashsrc.cmake)

########################################
# Generate the list of USE_FAMILY() calls
########################################

add_custom_command(
  OUTPUT ${CMAKE_BINARY_DIR}/Hashrefs.cpp
  IMPLICIT_DEPENDS CXX ${CMAKE_SOURCE_DIR}/hashes/Hashrefs.cpp.in
  DEPENDS ${HASH_SRC_FILES}
  COMMAND ${CMAKE_COMMAND}
    -D SRCDIR=${CMAKE_SOURCE_DIR}
    -D SRC=${CMAKE_SOURCE_DIR}/hashes/Hashrefs.cpp.in
    -D DST=${CMAKE_BINARY_DIR}/Hashrefs.cpp
    -P ${CMAKE_SOURCE_DIR}/hashes/Hashrefs.cmake
)

########################################
# Build all the hashes
########################################

add_library(
  SMHasher3Hashlib STATIC
#
  ${CMAKE_BINARY_DIR}/Hashrefs.cpp
#
  lib/Hashlib.cpp
  lib/Hashinfo.cpp
  lib/AEStables.cpp
  lib/Mathmult.cpp
#
  ${HASH_SRC_FILES}
)
target_include_directories(SMHasher3Hashlib PRIVATE include/hashlib PUBLIC include/common)

# Hashinfo.cpp has special dispensation to access util/ for VCode.h.
# Different CMake versions do this different ways
if(${CMAKE_VERSION} VERSION_LESS "3.11.0")
  set_source_files_properties(lib/Hashinfo.cpp PROPERTIES COMPILE_FLAGS "-I${CMAKE_SOURCE_DIR}/util")
else()
  set_source_files_properties(lib/Hashinfo.cpp PROPERTIES INCLUDE_DIRECTORIES "${CMAKE_SOURCE_DIR}/util")
endif()

########################################
# Build all the tests
########################################

add_library(
  SMHasher3Tests STATIC
#
  util/Platform.cpp
  util/Analyze.cpp
  util/Blob.cpp
  util/Blobsort.cpp
  util/Stats.cpp
  util/VCode.cpp
  util/Wordlist.cpp
#
  tests/SanityTest.cpp
  tests/AvalancheTest.cpp
  tests/BitIndependenceTest.cpp
  tests/DifferentialTest.cpp
  tests/DiffDistributionTest.cpp
  tests/HashMapTest.cpp
  tests/SparseKeysetTest.cpp
  tests/ZeroesKeysetTest.cpp
  tests/WindowedKeysetTest.cpp
  tests/CyclicKeysetTest.cpp
  tests/TwoBytesKeysetTest.cpp
  tests/TextKeysetTest.cpp
  tests/PermutationKeysetTest.cpp
  tests/SeedTest.cpp
  tests/SeedZeroesTest.cpp
  tests/SeedBlockLenTest.cpp
  tests/SeedBlockOffsetTest.cpp
  tests/SeedDiffDistTest.cpp
  tests/SeedAvalancheTest.cpp
  tests/SeedBitIndependenceTest.cpp
  tests/BadSeedsTest.cpp
  tests/PerlinNoiseTest.cpp
  tests/PopcountTest.cpp
  tests/PRNGTest.cpp
  tests/SpeedTest.cpp
)
target_include_directories(SMHasher3Tests PRIVATE util PUBLIC include/common)

add_executable(SMHasher3 main.cpp)
target_include_directories(SMHasher3 PUBLIC include/common PRIVATE util tests include/hashlib)
target_link_libraries(SMHasher3 SMHasher3Tests SMHasher3Hashlib ${threads_link_command})

########################################
# Miscellany
########################################

find_package(Git)
add_custom_target(SMHasher3Version ${CMAKE_COMMAND}
    -D SRC=${CMAKE_SOURCE_DIR}/version.h.in
    -D DST=${CMAKE_BINARY_DIR}/include/version.h
    -D GIT_EXECUTABLE=${GIT_EXECUTABLE}
    -P ${CMAKE_SOURCE_DIR}/version.cmake
)
add_dependencies(SMHasher3 SMHasher3Version)

# IPO/LTO is a giant pain, and does not seem to increase performance at
# all (--extra runs 3s faster without it!). Disable it completely for now.

if(FALSE)
# Only do IPO/LTO if we are not on a dev branch
  if((CMAKE_MAJOR_VERSION EQUAL 3 AND CMAKE_MINOR_VERSION GREATER_EQUAL 9)
     AND (CMAKE_BUILD_TYPE STREQUAL "Release"))
    include(CheckIPOSupported)
    check_ipo_supported(RESULT ipo_supported OUTPUT error)
  endif()
  execute_process(
      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
      OUTPUT_STRIP_TRAILING_WHITESPACE
      OUTPUT_VARIABLE GIT_BRANCHISH
      RESULT_VARIABLE GIT_BRANCHISH_ERROR_CODE
      COMMAND ${GIT_EXECUTABLE} describe --contains --always --all HEAD
  )
  if(NOT GIT_BRANCHISH_ERROR_CODE)
    string(FIND "${GIT_BRANCHISH}" "dev" offset)
    if("${offset}" EQUAL 0)
      set(ipo_supported FALSE)
      set(error "disabled on dev branch")
    endif()
  endif()
  if(ipo_supported)
    message(STATUS "IPO / LTO enabled")
    set_property(TARGET SMHasher3Tests PROPERTY INTERPROCEDURAL_OPTIMIZATION True)
    set_property(TARGET SMHasher3      PROPERTY INTERPROCEDURAL_OPTIMIZATION True)
    # Workaround CMake bugs 17781, 23136, and 23640 at the least :-/
    if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
      if(CMAKE_CXX_COMPILE_OPTIONS_IPO MATCHES "-fno-fat-lto-objects")
        message(STATUS "  Enabling LTO fat objects")
        string(REGEX REPLACE "-fno-fat-lto-objects" "-ffat-lto-objects" CMAKE_CXX_COMPILE_OPTIONS_IPO "${CMAKE_CXX_COMPILE_OPTIONS_IPO}")
      endif()
      # We get a warning forced on us even if we specify 1 explictly! Thanks, gcc!
      if(CMAKE_CXX_COMPILE_OPTIONS_IPO MATCHES "-flto=")
        message(STATUS "  Forcing 2 LTO processes")
        string(REGEX REPLACE "-flto=[a-zA-Z0-9]+" "-flto=2" CMAKE_CXX_COMPILE_OPTIONS_IPO "${CMAKE_CXX_COMPILE_OPTIONS_IPO}")
      endif()
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
      if(CMAKE_CXX_COMPILE_OPTIONS_IPO MATCHES "-flto=")
        message(STATUS "Forcing LTO with fat objects")
        string(REGEX REPLACE "-flto=[a-zA-Z0-9]+" "-flto=full" CMAKE_CXX_COMPILE_OPTIONS_IPO "${CMAKE_CXX_COMPILE_OPTIONS_IPO}")
      endif()
    endif()
  else()
    message(STATUS "IPO / LTO not supported: <${error}>")
  endif()
endif()

if(NOT (CMAKE_CROSSCOMPILING))
  enable_testing()
  add_test(VerifyAll SMHasher3 --test=VerifyAll)
  add_test(Sanity SMHasher3 --test=Sanity)
  add_test(Speed SMHasher3 --test=Speed)
  add_test(Cyclic SMHasher3 --test=Cyclic)
  add_test(Zeroes SMHasher3 --test=Zeroes)
endif()

if(MSVC)
add_custom_target(
  TAGS
  COMMAND dir /b /s *.cpp *.cc *.h | etags --language=c++ -
  DEPENDS ${SRCS}
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
else()
add_custom_target(
  TAGS
  COMMAND find . -name *.cpp -or -name *.cc -or -name *.h -print | etags --language=c++ -
  DEPENDS ${SRCS}
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
endif()
