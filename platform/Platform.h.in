@AUTOGEN_WARNING@
/*
 * SMHasher3
 * Copyright (C) 2021-2022  Frank J. T. Wojcik
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <https://www.gnu.org/licenses/>.
 */
#include <cstdio>    // Allow printf() from anywhere
#include <cstring>   // For memcpy

//-----------------------------------------------------------------------------
// Fixed-width integers (required before all else)
@FIXEDINT_IMPL@
@FIXEDINT_128_IMPL@
@FIXEDINT_SEEDT_IMPL@
#define __STDC_FORMAT_MACROS 1 // Some older gcc installations need this
#include <cinttypes>

//-----------------------------------------------------------------------------
// MSVC-specific things (if required)
@MSVC_IMPL@

//-----------------------------------------------------------------------------
// Declarations for Platform.cpp
void DisableThreads(void);

//-----------------------------------------------------------------------------
// Compiler-specific functions and macros

// Compiler branching hints
@LIKELY_IMPL@
@EXPECTP_IMPL@
@UNPREDICT_IMPL@

// Compiler behavioral bounds hints
@ASSUME_IMPL@
@UNREACHABLE_IMPL@

// Compiler/CPU data prefetching
@PREFETCH_IMPL@

// Function inlining control
@FORCE_INLINE_IMPL@
@NEVER_INLINE_IMPL@

// C "restrict" keyword replacement
@RESTRICT_IMPL@

// Integer rotation
// CAUTION: These are deliberately unsafe!
// They assume the rotation value is not 0 or >= {32,64}.
// If an invalid rotation amount is given, the result is undefined behavior.
@ROT32_IMPL@
@ROT64_IMPL@

// Population count (popcnt/popcount)
@POPCOUNT32_IMPL@
@POPCOUNT64_IMPL@

// Leading zero-bit count (ffs/clz)
// CAUTION: Assumes x is not 0!
@CLZ32_IMPL@
@CLZ64_IMPL@

// Integer byteswapping (endianness conversion)
// You can use the bit-specific ones directly, but the more generic
// versions below are preferred.
@BSWAP_IMPL@

//-----------------------------------------------------------------------------
// Generic wrappers for BSWAP*()
template < typename T >
static FORCE_INLINE T BSWAP(T value) {
    switch(sizeof(T)) {
    case 2: value = BSWAP16((uint16_t)value); break;
    case 4: value = BSWAP32((uint32_t)value); break;
    case 8: value = BSWAP64((uint64_t)value); break;
    default: break;
    }
    return value;
}

template < typename T >
static FORCE_INLINE T COND_BSWAP(T value, bool doit) {
    if (!doit || (sizeof(T) < 2)) { return value; }
    return BSWAP(value);
}

//-----------------------------------------------------------------------------
// User-configurable implementations

// Endianness detection
@ENDIAN_IMPL@

// Threading includes and global state
#if defined(HAVE_THREADS)
  #include <thread>
  extern unsigned g_NCPU;
#else
  extern const unsigned g_NCPU;
#endif

//-----------------------------------------------------------------------------
// Routines for turning bytes in memory into integers. These move data
// in alignment-safe ways, with optional byte swapping.
//
// memcpy() is the only known way of safely moving data this way;
// "safe" meaning "defined C++ behavior" AND "working regardless of
// alignment". Every memcpy() call here has a fixed size, and modern
// compilers tend to inline these into alignment-safe data moves/loads
// that are best for the platform being compiled for. Earlier
// compilers did not always do this very well, at least on non-x86
// platforms.
//
// If someone ever wanted to allow hashes to use undefined-behavior
// for faster access, this is where different access methods could be
// introduced, such as reading through a union or just doing direct
// memory access by pointer type conversion. Both of those are
// undefined behavior (UB), though! Beware of nasal demons!
//
// It's also plausible to introduce different versions of these which
// handle known-to-be-aligned accesses in a different way, perhaps
// through another template parameter.

template < bool bswap >
static FORCE_INLINE uint64_t GET_U64(const uint8_t * b, const uint32_t i) {
    uint64_t n;
    memcpy(&n, &b[i], 8);
    n = COND_BSWAP(n, bswap);
    return n;
}

template < bool bswap >
static FORCE_INLINE uint32_t GET_U32(const uint8_t * b, const uint32_t i) {
    uint32_t n;
    memcpy(&n, &b[i], 4);
    n = COND_BSWAP(n, bswap);
    return n;
}

template < bool bswap >
static FORCE_INLINE uint16_t GET_U16(const uint8_t * b, const uint32_t i) {
    uint16_t n;
    memcpy(&n, &b[i], 2);
    n = COND_BSWAP(n, bswap);
    return n;
}

template < bool bswap >
static FORCE_INLINE void PUT_U16(uint16_t n, uint8_t * b, const uint32_t i) {
    n = COND_BSWAP(n, bswap);
    memcpy(&b[i], &n, 2);
}

template < bool bswap >
static FORCE_INLINE void PUT_U32(uint32_t n, uint8_t * b, const uint32_t i) {
    n = COND_BSWAP(n, bswap);
    memcpy(&b[i], &n, 4);
}

template < bool bswap >
static FORCE_INLINE void PUT_U64(uint64_t n, uint8_t * b, const uint32_t i) {
    n = COND_BSWAP(n, bswap);
    memcpy(&b[i], &n, 8);
}

//-----------------------------------------------------------------------------
// Generic vector support
@VECTOR_IMPL@
@SHUFFLE_IMPL@

//-----------------------------------------------------------------------------
// Debugging helpers
//
// Really wish these could be moved into the CMake generation-time
// detection, but I can't find a reliable way of checking if "-DDEBUG"
// will be passed to the compiler.

#if defined(DEBUG)
  #include <cassert>

  #undef assume
  #define assume(x) assert(x)

  #undef unreachable
  #define unreachable() assert(0)

  #define verify(x) assert(x)
#else
  static void warn_if(bool x, const char * s, const char * fn, uint64_t ln) {
      if (!x) {
          printf("Statement %s is not true: %s:%" PRId64 "\n", s, fn, ln);
      }
  }
  #define verify(x) warn_if(x, #x, __FILE__, __LINE__)
#endif

//-----------------------------------------------------------------------------
// Instruction-set architecture header detection, for internal use only

#cmakedefine HAVE_ARM_NEON
#cmakedefine HAVE_ARM_ACLE
#cmakedefine HAVE_IMMINTRIN
#cmakedefine HAVE_AMMINTRIN
#cmakedefine HAVE_X86INTRIN

//-----------------------------------------------------------------------------
// Instruction-set architecture and platform feature availability

#cmakedefine HAVE_32BIT_PLATFORM

#cmakedefine HAVE_SSE_2
#cmakedefine HAVE_GOOD_LOADU_32
#cmakedefine HAVE_GOOD_LOADU_64
#cmakedefine HAVE_SSSE_3
#cmakedefine HAVE_SSE_4_1
#cmakedefine HAVE_XOP
#cmakedefine HAVE_X86_64_CRC32C
#cmakedefine HAVE_X86_64_CLMUL
#cmakedefine HAVE_X86_64_AES
#cmakedefine HAVE_X86_64_SHA1
#cmakedefine HAVE_X86_64_SHA2
#cmakedefine HAVE_AVX
#cmakedefine HAVE_AVX2
#cmakedefine HAVE_AVX512_F
#cmakedefine HAVE_AVX512_BW
#cmakedefine HAVE_AVX512_VL
#cmakedefine HAVE_UMULH
#cmakedefine HAVE_UMUL128
#cmakedefine HAVE_X86_64_ASM
#cmakedefine HAVE_ARM_AES
#cmakedefine HAVE_ARM_SHA1
#cmakedefine HAVE_ARM_SHA2
#cmakedefine HAVE_ARM_ASM
#cmakedefine HAVE_ARM64_ASM
#cmakedefine HAVE_PPC_VSX
#cmakedefine HAVE_PPC_AES
#cmakedefine HAVE_PPC_ASM
